Graphs - Implementation of graph traversal BFS (Breadth-first search) or DFS (Depth-first search)

1. Write a program for bipartite graph detection. Program must be called in a form:
	<the name of a program> <input text file>
   The input file contains a description of an undirected graph in the form of a list of edges. 
   Each edge is described by a pair of vertices. 
   For simplicity, we omit error detection assuming that the input files are correct. 
   2 text files are included: bp.txt containing the bipartite graph, and nbp.txt containing the non-bipartite graph.
   
   A vicinity matrix, a vicinity list, or an incidence matrix is used to record the graph. 
   Since we do not have a predetermined number of vertices in the input file, nor do we assume that the vertices are consecutive real numbers, 
   here a vicinity list based on std::map or std::unordered_map will work best. 
   In addition, the useful data structures are: 
   a queue (can be implemented on the basis of std::queue, possibly std::dque or std::list, but absolutely not std::vector), 
   and a list of vertex colors (for the reasons above on the basis of std::map or std::unordered_map).

Bipartite graph - see https://en.wikipedia.org/wiki/Bipartite_graph
In the mathematical field of graph theory, a bipartite graph (or bigraph) is a graph whose vertices can be divided into two disjoint and independent sets U and V, 
that is every edge connects a vertex in U to one in V. 
Vertex sets U and V are usually called the parts of the graph. Equivalently, a bipartite graph is a graph that does not contain any odd-length cycles.